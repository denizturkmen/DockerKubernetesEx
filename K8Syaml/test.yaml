kind: Service
apiVersion: v1
metadata:
  name: example
  namespace: deniz
spec:
  selector:
    name: example
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 5080
  type: LoadBalancer
---

kind: Ingress
apiVersion: extensions/v1beta1
metadata:
  name: example
  namespace: deniz
  annotations:
    nginx.ingress.kubernetes.io/proxy-body-size: 0m
    #nginx.ingress.kubernetes.io/rewrite-target: $2
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/proxy-send-timeout: '200'
    nginx.ingress.kubernetes.io/proxy-read-timeout: '200'
    nginx.ingress.kubernetes.io/proxy-connect-timeout: '200'
     
spec:
  tls:
    - hosts:
        - web.example.com
  rules:
    - host: web.example.com
      http:
        paths:
          - path: "/(/|$)(.*)"
            backend:
              serviceName: example
              servicePort: 5080

---


kind: PersistentVolume
apiVersion: v1
metadata:
  name: example
  namespace: deniz
spec:
  hostPath:
    path: "/mnt/kubernetes/example"
  capacity:
    storage: 25Gi
  accessModes:
    - ReadWriteOnce
  nodeAffinity:
    required:
      nodeSelectorTerms:
        - matchExpressions:
            - key: kubernetes.io/hostname
              operator: In
              values:
                - deniz-master
  claimRef:
    kind: PersistentVolumeClaim
    apiVersion: v1
    namespace: deniz
    name: example-example-0
  persistentVolumeReclaimPolicy: Retain
  volumeMode: Filesystem

---

kind: StatefulSet
apiVersion: apps/v1
metadata:
  name: example
  namespace: deniz
spec:
  replicas: 1
  selector:
    matchLabels:
      name: example
  serviceName: example
  template:
    metadata:
      labels:
        name: example
    spec:
      #      imagePullSecrets:
      #        - name: regcred
      hostNetwork: true
      containers:        
        - name: example
          image: example
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              protocol: TCP
              containerPort: 5080
              hostPort: 5080
          volumeMounts:
            - name: example
              mountPath: /var/www
          
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: kubernetes.io/hostname
                    operator: In
                    values:
                      - deniz-master
  volumeClaimTemplates:
    - metadata:
        name: example
        namespace: deniz
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 25Gi

---